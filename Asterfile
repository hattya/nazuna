var proj = os.getwd().split(/[/\\]+/).slice(-1);
var title = 'Aster â˜† ' + proj;
var rdeps = {
  './': [
    './cmd/nzn'
  ],
  './testutil': [
    './',
    './cmd/nzn'
  ]
};

aster.title(title);

// go
aster.watch(/.+\.go$/, function(files) {
  if (go('get', '-t', '-v', './...')) {
    return;
  }
  if (go('vet', './...')) {
    return;
  }
  var order = [];
  files.map(function(f) {
    return './' + f.split(/[/\\]+/).slice(0, -1).join('/');
  }).filter(function(e, i, a) {
    return a.indexOf(e) === i;
  }).forEach(function(pkg) {
    order.push(pkg);
    Array.prototype.push.apply(order, rdeps[pkg]);
  });
  order.filter(function(e, i, a) {
    return a.indexOf(e) === i;
  }).forEach(function(pkg) {
    var out = 'cover.out';
    var html = 'coverage.html';
    if (2 < pkg.length) {
      out = pkg + '/' + out;
      html = pkg + '/' + html;
    }
    if (go('test', '-v', '-covermode', 'count', '-coverprofile', out, pkg)) {
      return;
    }
    cover('-func', out);
    cover('-html', out, '-o', html);
  });
});

function go() {
  var args = ['go'].concat(Array.prototype.slice.call(arguments));
  var cmd = args[1] === 'get' ? 'bulid' : args[1];
  var rv = system(args);
  if (!rv) {
    aster.notify('success', proj + ': ' + cmd, cmd + ' passed');
  } else {
    aster.notify('failure', proj + ': ' + cmd, cmd + ' failed');
  }
  return rv;
}

function cover() {
  return system(['go', 'tool', 'cover'].concat(Array.prototype.slice.call(arguments)));
}

// rst
aster.watch(/.+\.rst$/, function(files) {
  files.forEach(rst2html);
});

function rst2html(rst) {
  var rst2html;
  var ok = ['rst2html.py', 'rst2html'].some(function(s) {
    rst2html = s;
    return os.whence(rst2html);
  });
  if (!ok) {
    return true;
  }
  var rv = system([rst2html, '--strict', rst, rst.slice(0, -4) + '.html']);
  if (!rv) {
    aster.notify('success', proj + ': rst2html', rst);
  } else {
    aster.notify('failure', proj + ': rst2html', rst + ' failed');
  }
  return rv;
}

// system
function system(args) {
  console.log('+ ' + args.join(' '));
  return os.system(args);
}
